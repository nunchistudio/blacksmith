package {{ .Package }}

import (
	{{ if .WithMigrations -}}
  "database/sql"
  "path/filepath"
  {{ end -}}
	"time"

	{{ if .WithMigrations -}}
  "github.com/nunchistudio/blacksmith/adapter/wanderer"
  {{ end -}}
	"github.com/nunchistudio/blacksmith/flow/source"
	"github.com/nunchistudio/blacksmith/helper/logger"

	{{ if .WithMigrations -}}
	"github.com/nunchistudio/blacksmith-integrations/sqlike"
	{{- end }}
)

{{ if not .NoComments -}}
/*
Context is a dictionary of information that provides useful context about an
event. It can shared across triggers of a source, or event between multiple
sources.

The context should be used inside every triggers for consistency. It must be a
valid JSON since it will be used by encoding/json Marshal and Unmarshal functions.
*/
{{ end -}}

type Context struct {
	// ...
}

{{ if not .NoComments -}}
/*
{{ .CapitalizedName }} implements the Blacksmith source.Source interface for the source "{{ .Name }}".
*/
{{ end -}}

type {{ .CapitalizedName }} struct {
	env     *Options
	options *source.Options
}

{{ if not .NoComments -}}
/*
New returns a valid Blacksmith source.Source for {{ .CapitalizedName }}.
*/
{{ end -}}

func New(env *Options) source.Source {

	// Validate the environment options passed by the application.
	// Stop the process if any error is returned.
	if err := env.validate(); err != nil {
		logger.Default.Fatal(err)
	}

	return &{{ .CapitalizedName }}{
		env: env,
		options: &source.Options{
			Versions: map[string]time.Time{
				"{{ .Version }}": time.Time{},
			},
			DefaultVersion: "{{ .Version }}",
		},
	}
}

{{ if not .NoComments -}}
/*
String returns the string representation of the source {{ .CapitalizedName }}.
*/
{{ end -}}

func (s *{{ .CapitalizedName }}) String() string {
	return "{{ .Name }}"
}

{{ if not .NoComments -}}
/*
Options returns common source options for {{ .CapitalizedName }}. They will be
shared across every triggers of this source, except when overridden.
*/
{{ end -}}

func (s *{{ .CapitalizedName }}) Options() *source.Options {
	return s.options
}

{{ if not .NoComments -}}
/*
Triggers return a list of triggers the source {{ .CapitalizedName }} is able
to handle.
*/
{{ end -}}

func (s *{{ .CapitalizedName }}) Triggers() map[string]source.Trigger {
	return map[string]source.Trigger{

		// ...

	}
}

{{ if .WithMigrations -}}
{{ if not .NoComments -}}
/*
Migrate is the implementation of the wanderer.WithMigrate interface
for the source {{ .CapitalizedName }}. It allows the source, and all of its
triggers, to have a migration logic. This is the function called
whenever a migration needs to run or to rollback.

It can leverage the sqlike package for running the migration within
a SQL transaction, using the standard database/sql package.
*/
{{ end -}}

func (s *{{ .CapitalizedName }}) Migrate(tk *wanderer.Toolkit, migration *wanderer.Migration) error {
	db, err := sql.Open("<driver-name>", "<driver-url>")
	if err != nil {
		return err
	}

	defer db.Close()
	return sqlike.RunMigration(db, filepath.Join("relative", "path", "{{ .Name }}", "migrations"), migration)
}

{{ if not .NoComments -}}
/*
Migrations is the implementation of the wanderer.WithMigrations interface
for the source {{ .CapitalizedName }}. It allows the source to have migrations.

It can leverage the sqlike package for finding compatible SQL files
within a directory.
*/
{{ end -}}

func (s *{{ .CapitalizedName }}) Migrations(tk *wanderer.Toolkit) ([]*wanderer.Migration, error) {
	return sqlike.LoadMigrations(filepath.Join("relative", "path", "{{ .Name }}", "migrations"))
}
{{ end -}}
