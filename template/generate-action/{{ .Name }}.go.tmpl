package {{ .Package }}

import (
	{{ if .WithMigrations -}}
	"database/sql"
	{{ end -}}
	"encoding/json"
	{{ if .WithMigrations -}}
	"path/filepath"
	{{ end -}}
	"time"

	"github.com/nunchistudio/blacksmith/adapter/store"
	{{ if .WithMigrations -}}
	"github.com/nunchistudio/blacksmith/adapter/wanderer"
	{{ end -}}
	"github.com/nunchistudio/blacksmith/flow/destination"
	"github.com/nunchistudio/blacksmith/helper/errors"

	{{ if .WithMigrations -}}
	"github.com/nunchistudio/blacksmith-integrations/sqlike"
	{{- end }}
)

{{ if not .NoComments -}}
/*
{{ .CapitalizedName }} implements the Blacksmith destination.Action interface for the action
"{{ .Name }}". It holds the complete job's structure to load into the destination.
*/
{{ end -}}

type {{ .CapitalizedName }} struct {
	env     *Options

	Version string                      `json:"version,omitempty"`
	Context *Context                    `json:"context"`
	Data    *{{ .CapitalizedName }}Data `json:"data"`
	SentAt  *time.Time                  `json:"sent_at,omitempty"`
}

{{ if not .NoComments -}}
/*
{{ .CapitalizedName }}Data holds the data object sent to the destination.
*/
{{ end -}}

type {{ .CapitalizedName }}Data struct {
	// ...
}

{{ if not .NoComments -}}
/*
String returns the string representation of the action {{ .CapitalizedName }}.
*/
{{ end -}}

func (a {{ .CapitalizedName }}) String() string {
	return "{{ .Name }}"
}

{{ if .WithHooks -}}
{{ if not .NoComments -}}
/*
Init lets you add business logic for the action's initialization,
such as opening a connection pool. It is called when starting the
scheduler service or before running migrations.
*/
{{ end -}}

func (a {{ .CapitalizedName }}) Init(tk *destination.Toolkit) error {

	// ...

	return nil
}

{{ if not .NoComments -}}
/*
Shutdown lets you add business logic for the action's shutdown,
such as closing a connection pool. It is called when shutting down
the scheduler service or after running migrations.
*/
{{ end -}}

func (a {{ .CapitalizedName }}) Shutdown(tk *destination.Toolkit) error {

	// ...

	return nil
}
{{ end -}}

{{ if not .NoComments -}}
/*
Schedule allows the action to override the schedule options of
its destination. By default, do not override.
*/
{{ end -}}

func (a {{ .CapitalizedName }}) Schedule() *destination.Schedule {
	return nil
}

{{ if not .NoComments -}}
/*
Marshal is the function being run when the action receives data into
the {{ .CapitalizedName }} receiver. Like for a source's trigger, it is also
in charge of the "T" in the ETL process: it can Transform (if needed) the
event's data for the job data structure.
*/
{{ end -}}

func (a {{ .CapitalizedName }}) Marshal(tk *destination.Toolkit) (*destination.Job, error) {

	{{ if not .NoComments -}}
	// Try to marshal the data passed directly to the receiver.
	{{ end -}}
	data, err := json.Marshal(&a.Data)
	if err != nil {
		return nil, err
	}

	{{ if not .NoComments -}}
	// Create a job with the data. Since the 'Context' key is not
	// set, the one from the event will automatically be applied.
	{{ end -}}
	j := &destination.Job{
		Version: a.Version,
		Data:    data,
		SentAt:  a.SentAt,
	}

	{{ if not .NoComments -}}
	// Return the job including the marshaled data.
	{{ end -}}
	return j, nil
}

{{ if not .NoComments -}}
/*
Load is the function being run by the scheduler to load the data into
the destination. It is in charge of the "L" in the ETL process.

It received a queue of events containing jobs related to this action
only. When the action if configured for realtime loads, the queue of
events will only contain a single event. If the action if configured
for batch loads, this function will run given its schedule and the
queue will contain every events with their respective jobs to load
into the destinations.

When jobs failed, the scheduler will automatically retry to load those
given the schedule of the action, or the one from the destination. In
this case, the queue of events will contain every failed jobs.
*/
{{ end -}}

func (a {{ .CapitalizedName }}) Load(tk *destination.Toolkit, queue *store.Queue, then chan<- destination.Then) {

	{{ if not .NoComments }}
	// We can go through every events received from the queue and their
	// related jobs. The queue can contain one or many events. The jobs
	// present in the events are specific to this action only.
	//
	// This allows to parse everything needed. This can also be useful for
	// making a request to the destination for each event / job if the
	// destination does not allow batch loads. If the destination does
	// allow batch loads, we should write to Then only once: outside these
	// for loops with no job IDs specified.
	{{ end -}}
	for _, event := range queue.Events {
		for _, job := range event.Jobs {

			{{ if not .NoComments -}}
			// If an error occured, inform the scheduler about it.
			{{ end -}}
			// ...
			if err != nil {
				then <- destination.Then{
					Jobs:  []string{job.ID},
					Error: &errors.Error{
						Message:    err.Error(),
					},
					ForceDiscard: false,
					OnFailed:     []destination.Action{},
					OnDiscarded:  []destination.Action{},
				}

				continue
			}

			{{ if not .NoComments -}}
			// If the job was successfully loaded, inform the scheduler about
			// its success.
			{{ end -}}
			then <- destination.Then{
				Jobs: []string{job.ID},
			}
		}
	}
}

{{ if .WithMigrations -}}
{{ if not .NoComments -}}
/*
Migrations is the implementation of the wanderer.WithMigrations interface
for the action {{ .CapitalizedName }}. It allows the action to have migrations
isolated from its parent destination.

It can leverage the sqlike package for finding compatible SQL files
within a directory.
*/
{{ end -}}

func (a {{ .CapitalizedName }}) Migrations(tk *wanderer.Toolkit) ([]*wanderer.Migration, error) {
	return sqlike.LoadMigrations(filepath.Join("relative", "path", "{{ .Name }}", "migrations"))
}
{{ end -}}
