package main

import (
	"net/http"

	"github.com/nunchistudio/blacksmith"
	"github.com/nunchistudio/blacksmith/adapter/pubsub"
	"github.com/nunchistudio/blacksmith/adapter/store"
	"github.com/nunchistudio/blacksmith/adapter/supervisor"
	"github.com/nunchistudio/blacksmith/adapter/wanderer"
	"github.com/nunchistudio/blacksmith/flow/destination"
	"github.com/nunchistudio/blacksmith/flow/source"
	"github.com/nunchistudio/blacksmith/service"
)

{{ if not .NoComments }}
/*
Init is the entrypoint of {{ .CapitalizedName }}, a Blacksmith application.
It is used by the Blacksmith CLI to load the application as a
Go plugin.
*/
{{ end -}}

func Init() *blacksmith.Options {

	var options = &blacksmith.Options{

		Gateway: &service.Options{
			// KeyFile:  "server.key",
			// CertFile: "server.crt",
		},
		Scheduler: &service.Options{
			// KeyFile:  "server.key",
			// CertFile: "server.crt",
			Admin: &service.Admin{
				Enabled:       true,
				WithDashboard: true,
				Middleware: func(next http.Handler) http.Handler {
					return http.HandlerFunc(func(res http.ResponseWriter, req *http.Request) {
						res.Header().Set("Content-Type", "application/json")
						res.Header().Set("Access-Control-Allow-Origin", "*")

						next.ServeHTTP(res, req)
					})
				},
			},
		},

		Store: &store.Options{
			From: "postgres",
			PurgePolicies: []*store.PurgePolicy{
				{
					Interval: "@weekly",
					WhereEvents: &store.WhereEvents{
						AndWhereJobs: &store.WhereJobs{
							AndWhereTransitions: &store.WhereTransitions{
								StatusIn: []string{
									store.StatusSucceeded,
								},
								StatusNotIn: []string{
									store.StatusAcknowledged,
									store.StatusAwaiting,
									store.StatusExecuting,
									store.StatusFailed,
									store.StatusDiscarded,
									store.StatusUnknown,
								},
							},
						},
					},
				},
			},
		},

		Wanderer: &wanderer.Options{
			From: "postgres",
		},
		Supervisor: &supervisor.Options{
			From: "postgres",
		},

		PubSub: &pubsub.Options{
			From: "nats",
		},

		Sources: []source.Source{},

		Destinations: []destination.Destination{},
	}

	return options
}
